AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  NewPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "sam-new-post-z"
      CodeUri: new_post/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python2.7
      Policies: AmazonDynamoDBFullAccess
#      Events:
#        HttpPostFuncMine:
#          Type: Api
#          Properties:
#            Path: /
#            Method: post
      Environment:
        Variables:
          DB_TABLE_NAME: !Ref DynamoDBTable
          SNS_TOPIC: !Ref SNSTopic

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "sam-get-post-z"
      CodeUri: get_post/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python2.7
      Policies: AmazonDynamoDBFullAccess
#      Events:
#        HttpGetFuncMine:
#          Type: Api
#          Properties:
#            Path: /
#            Method: get
#      Integration: #  CORS
#        ResponseParameters:
#          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      Environment:
        Variables:
          DB_TABLE_NAME: !Ref DynamoDBTable


  AudioPostsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AudioPostsApi
      Description: API used for Getting posts
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
           - REGIONAL

  GetPostsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - GetPostsFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws-cn:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: AudioPostsApi
          - "/*"

  NewPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - NewPostFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws-cn:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: AudioPostsApi
          - "/*"

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn

#  GetPostsStage:
#    DependsOn:
#    - ApiGatewayAccount
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      DeploymentId:
#        Ref: GetPostsDeployment
#      MethodSettings:
#      - DataTraceEnabled: true
#        HttpMethod: "*"
#        LoggingLevel: INFO
#        ResourcePath: "/*"
#      RestApiId:
#        Ref: AudioPostsApi
#      StageName: dev

  GetPostsDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GetPostsRequest
    - NewPostRequest
    Properties:
      RestApiId:
        Ref: AudioPostsApi
      StageName: prod

  AudioPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
     RestApiId:
       Ref: AudioPostsApi
     ParentId:
       Fn::GetAtt:
       - AudioPostsApi
       - RootResourceId
     PathPart: audios

  GetPostsRequest:
    DependsOn: GetPostsPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws-cn:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - GetPostsFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - "{"
              - '"postId": "$input.params(''postId'')"'
              - "}"
        PassthroughBehavior: WHEN_NO_TEMPLATES
      RequestParameters:
        method.request.querystring.postId: false
      ResourceId:
        Ref: AudioPostsResource
      RestApiId:
        Ref: AudioPostsApi
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  GetPostsOptionRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: AudioPostsApi
      ResourceId:
        Ref: AudioPostsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  NewPostRequest:
    DependsOn: GetPostsPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws-cn:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - NewPostFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
      RequestParameters:
        method.request.querystring.postId: false
      ResourceId:
        Ref: AudioPostsResource
      RestApiId:
        Ref: AudioPostsApi
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

#  NewGetApi:
#    Type: 'AWS::ApiGateway::RestApi'
#    Properties:
#      Body:
#        basePath: /
#        Method: post
#        schemes:
#            - https
#      Description: New Get API
#      Name: NewGetApi
#
#  GetPostApi:
#    Type: 'AWS::ApiGateway::RestApi'
#    Properties:
#      Body:
#        basePath : /
#        Method: get
#        schemes :
#            - https
#      Description: Get Post API
#      Name: GetPostApi
#
#  GetPostsFunctionMethod:
#    Type: "AWS::ApiGateway::Method"
#    Properties:
#      RestApiId: !Ref GetPostApi
#      AuthorizationType: NONE
#      HttpMethod: GET
#      RequestParameters:
#        method.request.querystring.name: true
#      Integration:
#        Type: AWS
#        RequestTemplates:
#          "application/json": "{
#              \"postId\" : $input.params('postId')
#            }"


  ConvertToAudioFunction:
    Type: AWS::Serverless::Function
    Properties:
       FunctionName: "sam-convert-to-audio-z"
       CodeUri: convert_to_audio/
       Handler: app.lambda_handler
       Role: !GetAtt LambdaServiceRole.Arn
       Runtime: python2.7
       Policies: AmazonDynamoDBFullAccess
       Timeout: 300
       Events:
         SNSTopic:
           Type: SNS
           Properties:
             Topic:
               Ref: SNSTopic
       Environment:
         Variables:
           DB_TABLE_NAME: !Ref DynamoDBTable
           BUCKET_NAME: !Ref S3Bucket


  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "sam-role-z"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  LambdaServicePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "sam-policy-z"
      #PolicyName: LambdaService
      Roles:
      - !Ref LambdaServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "sam-dynamodb-z"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "sam-bucket-z"
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

  S3WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "sam-s3-web-z"
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
          ## WEB

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "sam-sns-z"
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "ConvertToAudioFunction"
              - "Arn"
          Protocol: "lambda"

Outputs:
  Table:
    Description: DynamoDBTable Name
    Value: !GetAtt DynamoDBTable.Arn
  Role:
   Description: Role Name
   Value: !GetAtt LambdaServiceRole.Arn
  S3Bucket:
   Description: S3Bucket Name
   Value: !GetAtt S3Bucket.Arn
#  SNSTopic:
#   Description: SNS Topic Name
#   Value: !GetAtt SNSTopic.Arn