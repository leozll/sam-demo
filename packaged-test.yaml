AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  NewPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sam-new-post-z
      CodeUri: s3://sam-z/e7181314398bd9270c04f2366b63a530
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          DB_TABLE_NAME:
            Ref: DynamoDBTable
          SNS_TOPIC:
            Ref: SNSTopic
  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sam-get-post-z
      CodeUri: s3://sam-z/6043844e6ba69aad7c90966015ec609c
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          DB_TABLE_NAME:
            Ref: DynamoDBTable
  AudioPostsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AudioPostsApi
      Description: API used for Getting posts
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
        - REGIONAL
  GetPostsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - GetPostsFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws-cn:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: AudioPostsApi
          - /*
  NewPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - NewPostFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws-cn:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: AudioPostsApi
          - /*
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: '*'
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
  GetPostsDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GetPostsRequest
    - NewPostRequest
    Properties:
      RestApiId:
        Ref: AudioPostsApi
      StageName: prod
  AudioPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: AudioPostsApi
      ParentId:
        Fn::GetAtt:
        - AudioPostsApi
        - RootResourceId
      PathPart: audios
  GetPostsRequest:
    DependsOn: GetPostsPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws-cn:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - GetPostsFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - '{'
              - '"postId": "$input.params(''postId'')"'
              - '}'
        PassthroughBehavior: WHEN_NO_TEMPLATES
      RequestParameters:
        method.request.querystring.postId: false
      ResourceId:
        Ref: AudioPostsResource
      RestApiId:
        Ref: AudioPostsApi
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  GetPostsOptionRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: AudioPostsApi
      ResourceId:
        Ref: AudioPostsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  NewPostRequest:
    DependsOn: GetPostsPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws-cn:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - NewPostFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      RequestParameters:
        method.request.querystring.postId: false
      ResourceId:
        Ref: AudioPostsResource
      RestApiId:
        Ref: AudioPostsApi
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  ConvertToAudioFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sam-convert-to-audio-z
      CodeUri: s3://sam-z/7109594a8f90031991af4b19ccea05f1
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Policies: AmazonDynamoDBFullAccess
      Timeout: 300
      Events:
        SNSTopic:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopic
      Environment:
        Variables:
          DB_TABLE_NAME:
            Ref: DynamoDBTable
          BUCKET_NAME:
            Ref: S3Bucket
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sam-role-z
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  LambdaServicePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: sam-policy-z
      Roles:
      - Ref: LambdaServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: '*'
          Resource: '*'
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sam-dynamodb-z
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sam-bucket-z
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  S3WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sam-s3-web-z
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: sam-sns-z
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - ConvertToAudioFunction
          - Arn
        Protocol: lambda
Outputs:
  Table:
    Description: DynamoDBTable Name
    Value:
      Fn::GetAtt:
      - DynamoDBTable
      - Arn
  Role:
    Description: Role Name
    Value:
      Fn::GetAtt:
      - LambdaServiceRole
      - Arn
  S3Bucket:
    Description: S3Bucket Name
    Value:
      Fn::GetAtt:
      - S3Bucket
      - Arn
